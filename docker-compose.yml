networks:
  ocserv:

volumes:
  ocserv:
  ocserv-log:
  shared-ssl:
  postgres:

x-postgres: &postgres
  POSTGRES_DB: ocserv
  POSTGRES_NAME: ocserv
  POSTGRES_USER: ocserv-user
  POSTGRES_PASSWORD: ocserv-passwd
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432

services:
  postgres:
    image: postgres:latest
    container_name: postgres_ocserv
    restart: unless-stopped
    environment: *postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ocserv-user -d ocserv'" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ocserv

  ocserv:
    build:
      context: ./api
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: ocserv-api
    restart: unless-stopped
    privileged: true
    volumes:
      - ocserv:/etc/ocserv
      - ocserv-log:/var/log/ocserv
      - shared-ssl:/etc/ocserv/certs
    networks:
      - ocserv
    ports:
      - "8080:8080"
      - "443:433/udp"
      - "443:443/tcp"
    environment:
      <<: *postgres
      host: 0.0.0.0
      ALLOW_ORIGINS:
      SECRET_KEY: SECRET_KEY
      DEBUG: ${DEBUG:-false}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s         # Check every 20 seconds
      retries: 5            # Retry 5 times before marking the service as unhealthy
      timeout: 20s          # Wait for 20 seconds for a response
      start_period: 20s     # Wait for 20 seconds before starting the health check

  customer-api:
    build:
      context: ./api_customers
      dockerfile: Dockerfile
    container_name: ocserv-customer-api
    restart: unless-stopped
    networks:
      - ocserv
    ports:
      - "8081:8080"
    environment:
      <<: *postgres
    depends_on:
      postgres:
        condition: service_healthy

  log_service:
    build:
      context: ./log_service
      dockerfile: Dockerfile
    container_name: ocserv-log-process
    restart: unless-stopped
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ocserv
    ports:
      - "8082:8080"
    environment:
      <<: *postgres
      DOCKERIZED: true
    depends_on:
      postgres:
        condition: service_healthy

  ocserv-user-expiry:
    build:
      context: ./user_expiry
      dockerfile: Dockerfile
    container_name: ocserv-user-expiry
    restart: unless-stopped
    networks:
      - ocserv
    environment:
      <<: *postgres
    depends_on:
      postgres:
        condition: service_healthy